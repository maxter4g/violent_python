#Imports the packets
import socket
import os
import sys

def retBanner(ip, port):
    try:
        socket.setdefaulttimeout(2)     #to prevent long conexion time-outs
        s = socket.socket()             #open a socket
        s.connect((ip,port))            #connect that socket with the IP and the port
        banner = s.recv(1024)           #get the banner of the socket conexion
        return banner
    except:
        return

def checkVulns(banner, filename):
    f = open(filename,'r')              #Open the file with read perms
    for line in f.readlines():          #for every line (banner vulnerability)
        if line.strip('\n') in banner:  #parse the line
            print '[+] Server is vulnerable: ' + banner.strip('\n')

def main(): #main function
    #check the args cause the file of vulnerabilities have to be passed out
    if len(sys.argv) == 2:
        filename = sys.argv[1]
        if not os.path.isfile(filename):                    #check if the argv is a file
            print "[-] " + filename + " does not exists."
            exit(0)
        if not os.access(filename, os.R_OK):                #and that we have permission to read it
            print "[-] " + filename + " acces denied."
            exit(0)
    else:
        print "[-] Usage: " + str(sys.argv[0]) + " <vuln filename>"
        exit(0)

    #port list hardcoded
    portList = [ 21 , 22 , 25 , 80 , 110 , 443 ]

    #the subnet ranges are hardcoded
    #rangeSubNet = range(0,255)
    rangeSubNet = range(1,30)
    for x in rangeSubNet:
        #The ip to scan is hardcoded too :-)
        #ip = "192.168.1." + str(x)
        ip = "10.0.0." + str(x)
        for port in portList:
            print "[=] checking IP: " + ip + " and port: " + str(port)
            banner = retBanner(ip, port) #call retBanner to get the banner of the connection
            if banner: # if there are banner check the vulnerabilities in with the known vulns in the file passed as argument
                print "[+] " + ip + ": " + banner
                checkVulns(banner, filename)


if __name__ == "__main__":
    main()


